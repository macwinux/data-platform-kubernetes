# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

permissions:
  contents: read

jobs:

  uv-compile:
    name: python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Install the libraries
        run: uv pip install flake8  pytest
      - name: Run tests
        run: uv run pytest

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements_old.txt ]; then pip install -r requirements_old.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest




#  pyinstaller:
#    needs: build
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
#    steps:
#    - uses: actions/checkout@v4
#    - uses: actions/setup-python@v5
#      with:
#        python-version: 3.11
#
#    - run: pip install -r requirements_old.txt pyinstaller
#    - run: pyinstaller -F --paths=dp --add-data="dp/resources:resources" ./dp/dp.py 
#    - uses: actions/upload-artifact@v4
#      with:
#        name: ${{ matrix.os }}
#        path: dist/dp*